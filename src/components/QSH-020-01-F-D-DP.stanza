#use-added-syntax(jitx)
defpackage jitx-fpga/components/QSH-020-01-F-D-DP :
  import core
  import jitx
  import jitx/commands

  import jsl/bundles
  import jsl/symbols
  import jsl/landpatterns

public pcb-component component (-- with-alignment-pins:True|False = true) :
  description = "Q Strip High Speed Ground Plane Socket"
  manufacturer = "Samtec"
  mpn = "QSH-020-01-F-D-DP-A" when with-alignment-pins else "QSH-020-01-F-D-DP"
  datasheet = "https://suddendocs.samtec.com/productspecs/qsh-qth.pdf"
  reference-prefix = "J"

  property(self.rated-temperature) = min-max(-55.0, 125.0)

  port D : diff-pair[20]

  pin-properties:
    [ pin:Ref       | pads:Ref ...     | side:Dir | row:Int | column:Int ]
    [ GND[0]        | G[1]             | Down     | -       | -          ]
    [ GND[1]        | G[2]             | Down     | -       | -          ]
    [ GND[2]        | G[3]             | Down     | -       | -          ]
    [ GND[3]        | G[4]             | Down     | -       | -          ]
    for i in 0 to 10 do :
      [ D[i].P      | (Ref(4 * i + 1)) | Left     | i       | -          ]
      [ D[i].N      | (Ref(4 * i + 3)) | Left     | i       | -          ]
      [ D[i + 10].P | (Ref(4 * i + 2)) | Right    | i       | -          ]
      [ D[i + 10].N | (Ref(4 * i + 4)) | Right    | i       | -          ]

  val box = BoxSymbol(self)
  set-grid(box, [10, 1])
  assign-symbol $ create-symbol(box)

  assign-landpattern $ create-landpattern(QSH-Package(with-alignment-pins))

public pcb-module device (-- with-alignment-pins:True|False = true) :
  public inst C : component(with-alignment-pins = with-alignment-pins)

  port GND : pin
  port D : diff-pair[20]

  let:
    net GND (GND)
    for i in 0 to 4 do :
      net (GND C.GND[i])

  for i in 0 to 20 do :
    net (D[i] C.D[i])
    supports diff-pair :
      diff-pair.P => C.D[i].P
      diff-pair.N => C.D[i].N
    supports gpio :
      gpio.gpio => C.D[i].P
    supports gpio :
      gpio.gpio => C.D[i].N

;============================================================
;========================= Package ==========================
;============================================================

public defstruct QSH-Package <: Package :
  with-alignment-pins:True|False with:
    default => true
  package-body:PackageBody with:
    as-method => true
    default => PackageBody(
      width = typ(21.77)
      length = typ(8.51)
      height = typ(3.25)
    )
with:
  printer => true

defmethod name (pkg:QSH-Package) -> String :
  "QSH Syzygy Connector"

defmethod courtyard-excess (pkg:QSH-Package) -> Double :
  0.25

defmethod build-silkscreen (pkg:QSH-Package, vp:VirtualLP) -> False :
  val lines = if with-alignment-pins(pkg) : [
    Line(0.2, [Point(-10.635, 3.53), Point(-10.635, 3.62), Point(-7.735, 3.62)])
    Line(0.2, [Point(10.635, 3.53), Point(10.635, 3.62), Point(7.245, 3.62)])
    Line(0.2, [Point(-10.635, 1.81), Point(-10.635, -3.62), Point(-7.735, -3.62)])
    Line(0.2, [Point(10.635, 1.81), Point(10.635, -3.62), Point(7.245, -3.62)])
    ]
  else : [
    Line(0.2, [Point(-7.735, -3.62), Point(-10.635, -3.62), Point(-10.635, 3.62), Point(-7.735, 3.62)])
    Line(0.2, [Point(7.245, -3.62), Point(10.635, -3.62), Point(10.635, 3.62), Point(7.245, 3.62)])
    ]
  add-silkscreen-outline(vp, Union(lines))
  add-reference-designator(vp)

defmethod build-pads (pkg:QSH-Package, vp:VirtualLP) -> False :
  build-data-pads(pkg, vp)
  build-ground-pads(pkg, vp)
  if with-alignment-pins(pkg) :
    build-alignment-pins(pkg, vp)

defn build-data-pads (pkg:QSH-Package, vp:VirtualLP) -> False :
  val planner = new PadPlanner :
    defmethod active? (this, row:Int, column:Int) -> True|False :
      (column % 3) != 2
    defmethod shape-generator (this, row:Int, column:Int) -> (Dims -> Shape)|False :
      rect-shaper

  val num-scheme = new Numbering :
    ; 2 4 X 6 8 X 10 12 X ...
    ; 1 3 X 5 7 X  9 11 X ...
    defmethod to-pad-id (this, row:Int, column:Int) -> Int|Ref :
      Ref((2 * (column - (column / 3))) + (2 - row))

  val virt-pads = to-tuple $ pad-grid-smt(
    pad-size = Dims(0.28, 2.27)
    planner = planner,
    lead-grid = GridPlanner(
      pitch = Dims(0.5, 5.74),
      columns = 30,
      rows = 2,
      anchor = C
    )
    num-scheme = num-scheme
    )
  append-all(vp, virt-pads)

defn build-ground-pads (pkg:QSH-Package, vp:VirtualLP) -> False :
  append-all(vp, [
    VirtualPad(#R(G)[1], smd-pad(Rectangle(2.54, 0.43)), loc(-8.065, 0.0), class = ["pad"]),
    VirtualPad(#R(G)[2], smd-pad(Rectangle(4.7, 0.43)), loc(-3.175, 0.0), class = ["pad"]),
    VirtualPad(#R(G)[3], smd-pad(Rectangle(4.7, 0.43)), loc(3.175, 0.0), class = ["pad"]),
    VirtualPad(#R(G)[4], smd-pad(Rectangle(2.54, 0.43)), loc(8.065, 0.0), class = ["pad"])
    ])

defn build-alignment-pins (pkg:QSH-Package, vp:VirtualLP) -> False :
  append-all(vp, [
    VirtualPad(#R(A)[1], circle-npth-pad(1.02), loc(-10.085, 2.67), class = ["pad"]),
    VirtualPad(#R(A)[2], circle-npth-pad(1.02), loc(10.048, 2.67), class = ["pad"])
    ])
